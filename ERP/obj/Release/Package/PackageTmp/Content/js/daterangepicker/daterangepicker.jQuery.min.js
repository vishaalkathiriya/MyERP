(function (n) { n.fn.daterangepicker = function (t) { function c(t) { var r; if (!t.getDate()) return ""; var f = t.getDate(), u = t.getMonth(), e = t.getFullYear(); return u++, r = i.dateFormat, n.datepicker.formatDate(r, t) } function k() { r.data("state") == "closed" && (g(), r.fadeIn(300).data("state", "open"), i.onOpen()) } function s() { r.data("state") == "open" && (r.fadeOut(300).data("state", "closed"), i.onClose()) } function d() { r.data("state") == "open" ? s() : k() } function g() { var i = w || u, f = i.offset(), e = "left", t = f.left, o = n(window).width() - t - i.outerWidth(); t > o && (e = "right", t = o), r.parent().css(e, t).css("top", f.top + i.outerHeight()) } function nt(n, t, r, u) { if (n.is(".ui-daterangepicker-specificDate")) u.hide(), r.show(), t.find(".title-start").text(i.presets.specificDate), t.find(".range-start").restoreDateFromData().css("opacity", 1).show(400), t.find(".range-end").restoreDateFromData().css("opacity", 0).hide(400), setTimeout(function () { u.fadeIn() }, 400); else if (n.is(".ui-daterangepicker-allDatesBefore")) u.hide(), r.show(), t.find(".title-end").text(i.presets.allDatesBefore), t.find(".range-start").saveDateToData().datepicker("setDate", i.earliestDate).css("opacity", 0).hide(400), t.find(".range-end").restoreDateFromData().css("opacity", 1).show(400), setTimeout(function () { u.fadeIn() }, 400); else if (n.is(".ui-daterangepicker-allDatesAfter")) u.hide(), r.show(), t.find(".title-start").text(i.presets.allDatesAfter), t.find(".range-start").restoreDateFromData().css("opacity", 1).show(400), t.find(".range-end").saveDateToData().datepicker("setDate", i.latestDate).css("opacity", 0).hide(400), setTimeout(function () { u.fadeIn() }, 400); else if (n.is(".ui-daterangepicker-dateRange")) u.hide(), r.show(), t.find(".title-start").text(i.rangeStartTitle), t.find(".title-end").text(i.rangeEndTitle), t.find(".range-start").restoreDateFromData().css("opacity", 1).show(400), t.find(".range-end").restoreDateFromData().css("opacity", 1).show(400), setTimeout(function () { u.fadeIn() }, 400); else { u.hide(), t.find(".range-start, .range-end").css("opacity", 0).hide(400, function () { r.hide() }); var f = typeof n.data("dateStart") == "string" ? Date.parse(n.data("dateStart")) : n.data("dateStart")(), e = typeof n.data("dateEnd") == "string" ? Date.parse(n.data("dateEnd")) : n.data("dateEnd")(); t.find(".range-start").datepicker("setDate", f).find(".ui-datepicker-current-day").trigger("click"), t.find(".range-end").datepicker("setDate", e).find(".ui-datepicker-current-day").trigger("click") } return !1 } var u = n(this), i = n.extend({ presetRanges: [{ text: "Today", dateStart: "today", dateEnd: "today" }, { text: "Yesterday", dateStart: "Yesterday", dateEnd: "Yesterday" }, { text: "Last 7 days", dateStart: "today-7days", dateEnd: "today" }, { text: "Current Week", dateStart: function () { return Date.parse("today").previous().monday() }, dateEnd: "today" }, { text: "Previous Week", dateStart: function () { return Date.parse("today").previous().monday().addDays(-7) }, dateEnd: function () { return Date.parse("today").previous().monday().addDays(-1) } }, { text: "Current Month", dateStart: function () { return Date.parse("today").moveToFirstDayOfMonth() }, dateEnd: "today" }, { text: "Previous Month", dateStart: function () { return Date.parse("1 month ago").moveToFirstDayOfMonth() }, dateEnd: function () { return Date.parse("1 month ago").moveToLastDayOfMonth() } }, { text: "Current Year", dateStart: function () { var n = Date.parse("today"); return n.setMonth(0), n.setDate(1), n }, dateEnd: "today" }], presets: { specificDate: "Specific Date", allDatesBefore: "All Dates Before", allDatesAfter: "All Dates After", dateRange: "Date Range" }, rangeStartTitle: "Start date", rangeEndTitle: "End date", nextLinkText: "Next", prevLinkText: "Prev", target: u, doneButtonText: "Done", earliestDate: Date.parse("-15years"), latestDate: Date.parse("+15years"), constrainDates: !1, rangeSplitter: "-", dateFormat: "dd/mm/yy", closeOnSelect: !0, arrows: !1, appendTo: "body", onClose: function () { }, onOpen: function () { }, onChange: function () { }, datepickerOptions: null }, t), l = { onSelect: function () { var e = r.find(".range-start"), o = r.find(".range-end"), t, f; r.find(".ui-daterangepicker-specificDate").is(".ui-state-active") && o.datepicker("setDate", e.datepicker("getDate")), n(this).trigger("constrainOtherPicker"), t = c(e.datepicker("getDate")), f = c(o.datepicker("getDate")), u.length == 2 ? (u.eq(0).val(t), u.eq(1).val(f)) : u.val(t != f ? t + " " + i.rangeSplitter + " " + f : t), i.closeOnSelect && (r.find("li.ui-state-active").is(".ui-daterangepicker-dateRange") || r.is(":animated") || s(), n(this).trigger("constrainOtherPicker"), i.onChange()) }, defaultDate: 0 }, a, h, o, e, r, b, f, v, y, p, w; return u.bind("change", i.onChange), u.val(c(Date.parse("today"))), i.datepickerOptions = t ? n.extend(l, t.datepickerOptions) : l, h = Date.parse("today"), u.size() == 2 ? (o = Date.parse(u.eq(0).val()), e = Date.parse(u.eq(1).val()), o == null && (o = e), e == null && (e = o)) : (o = Date.parse(u.val().split(i.rangeSplitter)[0]), e = Date.parse(u.val().split(i.rangeSplitter)[1]), e == null && (e = o)), o != null && (a = o), e != null && (h = e), r = n('<div class="ui-daterangepicker ui-widget ui-helper-clearfix ui-widget-content ui-corner-all"><\/div>'), b = function () { var t = n('<ul class="ui-widget-content"><\/ul>').appendTo(r), u; return n.each(i.presetRanges, function () { n('<li class="ui-daterangepicker-' + this.text.replace(/ /g, "") + ' ui-corner-all"><a href="#">' + this.text + "<\/a><\/li>").data("dateStart", this.dateStart).data("dateEnd", this.dateEnd).appendTo(t) }), u = 0, n.each(i.presets, function (i, r) { n('<li class="ui-daterangepicker-' + i + " preset_" + u + ' ui-helper-clearfix ui-corner-all"><span class="ui-icon ui-icon-triangle-1-e"><\/span><a href="#">' + r + "<\/a><\/li>").appendTo(t), u++ }), t.find("li").hover(function () { n(this).addClass("ui-state-hover") }, function () { n(this).removeClass("ui-state-hover") }).click(function () { return r.find(".ui-state-active").removeClass("ui-state-active"), n(this).addClass("ui-state-active"), nt(n(this), r, f, v), !1 }), t }(), n.fn.restoreDateFromData = function () { return n(this).data("saveDate") && n(this).datepicker("setDate", n(this).data("saveDate")).removeData("saveDate"), this }, n.fn.saveDateToData = function () { return n(this).data("saveDate") || n(this).data("saveDate", n(this).datepicker("getDate")), this }, f = n('<div class="ranges ui-widget-header ui-corner-all ui-helper-clearfix"><div class="range-start"><span class="title-start">Start Date<\/span><\/div><div class="range-end"><span class="title-end">End Date<\/span><\/div><\/div>').appendTo(r), f.find(".range-start, .range-end").datepicker(i.datepickerOptions), f.find(".range-start").datepicker("setDate", a), f.find(".range-end").datepicker("setDate", h), f.find(".range-start, .range-end").bind("constrainOtherPicker", function () { i.constrainDates && (n(this).is(".range-start") ? r.find(".range-end").datepicker("option", "minDate", n(this).datepicker("getDate")) : r.find(".range-start").datepicker("option", "maxDate", n(this).datepicker("getDate"))) }).trigger("constrainOtherPicker"), v = n('<button class="btnDone ui-state-default ui-corner-all">' + i.doneButtonText + "<\/button>").click(function () { r.find(".ui-datepicker-current-day").trigger("click"), s() }).hover(function () { n(this).addClass("ui-state-hover") }, function () { n(this).removeClass("ui-state-hover") }).appendTo(f), n(this).click(function () { return d(), !1 }), f.hide().find(".range-start, .range-end, .btnDone").hide(), r.data("state", "closed"), f.find(".ui-datepicker").css("display", "block"), n(i.appendTo).append(r), r.wrap('<div class="ui-daterangepickercontain"><\/div>'), i.arrows && u.size() == 1 && (y = n('<a href="#" class="ui-daterangepicker-prev ui-corner-all" title="' + i.prevLinkText + '"><span class="ui-icon ui-icon-circle-triangle-w">' + i.prevLinkText + "<\/span><\/a>"), p = n('<a href="#" class="ui-daterangepicker-next ui-corner-all" title="' + i.nextLinkText + '"><span class="ui-icon ui-icon-circle-triangle-e">' + i.nextLinkText + "<\/span><\/a>"), n(this).addClass("ui-rangepicker-input ui-widget-content").wrap('<div class="ui-daterangepicker-arrows ui-widget ui-widget-header ui-helper-clearfix ui-corner-all"><\/div>').before(y).before(p).parent().find("a").click(function () { var i = f.find(".range-start").datepicker("getDate"), r = f.find(".range-end").datepicker("getDate"), t = Math.abs(new TimeSpan(i - r).getTotalMilliseconds()) + 864e5; return n(this).is(".ui-daterangepicker-prev") && (t = -t), f.find(".range-start, .range-end ").each(function () { var i = n(this).datepicker("getDate"); if (i == null) return !1; n(this).datepicker("setDate", i.add({ milliseconds: t })).find(".ui-datepicker-current-day").trigger("click") }), !1 }).hover(function () { n(this).addClass("ui-state-hover") }, function () { n(this).removeClass("ui-state-hover") }), w = u.parent()), n(document).click(function () { r.is(":visible") && s() }), r.click(function () { return !1 }).hide(), this } })(jQuery);
//@ sourceMappingURL=daterangepicker.jQuery.min.js.map